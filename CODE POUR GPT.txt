### cerveau.py
from transformers import pipeline

_classifier = None

def _get_classifier():
    global _classifier
    if _classifier is None:
        _classifier = pipeline(
            "zero-shot-classification",
            model="typeform/distilbert-base-uncased-mnli",
        )
    return _classifier

def analyser_requete(question: str) -> str:
    """Analyse la question et renvoie un mot-clÃ© indiquant la cible."""
    classifier = _get_classifier()
    labels = ["lien", "titre", "image", "texte", "bouton"]
    result = classifier(question, labels)
    return result["labels"][0]


---

### web_interface.py
from flask import Flask, request, render_template
from css_selector_generator import generate_selector

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    selector = ''
    html_snippet = ''
    if request.method == 'POST':
        html_snippet = request.form.get('html', '')
        selector = generate_selector(html_snippet)
    return render_template('index.html', selector=selector, html=html_snippet)

if __name__ == '__main__':
    app.run(debug=True)

---

### detect_selector.py
import sys
import re
import argparse
from typing import List, Tuple
from bs4 import BeautifulSoup

# Inline and structural tags used to weight candidate elements
INLINE_TAGS = {
    "span", "i", "b", "em", "strong", "small", "label"
}

STRUCTURAL_TAGS = {
    "div", "section", "article", "nav", "main",
    "h1", "h2", "h3", "h4", "h5", "h6",
    "a", "p", "ul", "ol", "li"
}

# Tags that are too generic to rely on when building a selector
GENERIC_TAGS = {"div", "span", "li", "ul", "ol", "p"}

# Classes considered generic and usually not helpful for a selector
GENERIC_CLASSES = {
    "container", "wrapper", "wrap", "box", "block",
    "row", "col", "inner", "outer", "bold"
}

# Keywords that hint an element is interesting (title, card, ...)
POSITIVE_KEYWORDS = {
    "title", "desc", "description", "content", "card",
    "item", "nav", "link", "button"
}

def is_dynamic_id(value: str) -> bool:
    """Return True if the id looks auto-generated (contains long digits)."""
    return bool(re.search(r"\d{2,}", value)) or len(value) > 30

def has_keyword(value: str) -> bool:
    """Return True if the given string contains a positive keyword."""
    low = value.lower()
    return any(k in low for k in POSITIVE_KEYWORDS)

def is_generic(value: str) -> bool:
    """Return True if the class name is too generic."""
    return value.lower() in GENERIC_CLASSES

def compute_score(tag) -> int:
    """Score an element to estimate how good it is as a target."""
    score = 0
    name = tag.name.lower()

    if name in INLINE_TAGS:
        score -= 3
    if name in STRUCTURAL_TAGS:
        score += 2

    # Penalise very deep elements
    depth = 0
    parent = tag.parent
    while parent and parent.name != '[document]':
        depth += 1
        parent = parent.parent
    score -= depth

    # Favour elements that contain a fair amount of text
    text_length = len(tag.get_text(strip=True))
    density = text_length / (len(tag.find_all(True)) + 1)
    if text_length > 40:
        score += 2
    elif text_length > 15:
        score += 1
    if density > 30:
        score += 2
    elif density > 10:
        score += 1

    # Semantic headings have extra weight
    if name.startswith('h') and len(name) == 2 and name[1].isdigit():
        score += 2

    tag_id = tag.get("id")
    if tag_id:
        if not is_dynamic_id(tag_id):
            score += 5
            if has_keyword(tag_id):
                score += 1
        else:
            score -= 1

    classes = tag.get("class", [])
    for cls in classes:
        if is_generic(cls):
            score -= 2
        else:
            score += 3
            if has_keyword(cls):
                score += 1
    return score

def choose_best_elements(soup: BeautifulSoup, mode: str = 'all', limit: int = 3):
    """Return a list of promising elements in the snippet."""
    candidates: List[Tuple[int, any]] = []
    for el in soup.find_all(True):
        if mode == 'links' and el.name != 'a':
            continue
        if mode == 'text' and el.name not in {
            'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'
        }:
            continue
        sc = compute_score(el)
        candidates.append((sc, el))
    candidates.sort(key=lambda x: x[0], reverse=True)
    result = []
    selectors_seen = set()
    for score, el in candidates:
        candidate = refine_candidate(el)
        sel = build_selector(candidate)
        if sel in selectors_seen:
            continue
        selectors_seen.add(sel)
        result.append(candidate)
        if len(result) >= limit:
            break
    return result

def refine_candidate(el):
    """If the element contains a single anchor, return that anchor."""
    anchors = el.find_all('a', recursive=True)
    if len(anchors) == 1:
        return anchors[0]
    return el

def has_good_id(tag) -> bool:
    tag_id = tag.get("id")
    return tag_id is not None and not is_dynamic_id(tag_id)

def describe_element(elem: 'BeautifulSoup') -> str:
    """Return a short human explanation for what the element represents."""
    name = elem.name.lower()
    if name == 'a':
        return "Lien principal"
    if name in {'h1', 'h2', 'h3', 'h4', 'h5', 'h6'}:
        return "Titre de section"
    if name in {'ul', 'ol'}:
        return "Liste d'\u00e9l\u00e9ments"
    if name == 'p':
        return "Paragraphe de texte"
    return f"\u00c9l\u00e9ment {name}"

def build_selector(elem) -> str:
    """Build a short yet robust CSS selector for the element."""
    parts = []
    current = elem
    first = True
    max_levels = 4
    while current and current.name != '[document]':
        if has_good_id(current):
            # Prefer a stable id whenever possible
            parts.append(f"#{current['id']}")
            break
        classes = [c for c in current.get('class', []) if not is_generic(c)]
        if first:
            # For the candidate element keep the tag name
            if classes:
                part = current.name + ''.join(f'.{c}' for c in classes)
            else:
                part = current.name
            parts.append(part)
            first = False
        else:
            if classes:
                if current.name in GENERIC_TAGS:
                    part = ''.join(f'.{c}' for c in classes)
                else:
                    part = current.name + ''.join(f'.{c}' for c in classes)
                parts.append(part)
        current = current.parent
        if len(parts) >= max_levels:
            break
    parts.reverse()
    return ' '.join(parts)

def prompt_input() -> str:
    """Display a prompt and read HTML from stdin until EOF."""
    print(
        "\U0001F4E5 Collez ici l'extrait HTML \u00e0 analyser (puis appuyez sur Entr\u00e9e + Ctrl+Z (Windows) ou Ctrl+D (Mac/Linux)) :"
    )
    return sys.stdin.read()

def main():
    parser = argparse.ArgumentParser(
        description="Generate the most stable CSS selector from an HTML snippet"
    )
    parser.add_argument(
        "file", nargs="?", help="Optional HTML file. If omitted, read from stdin"
    )
    parser.add_argument(
        "--mode",
        choices=["auto", "links", "text", "all"],
        default="auto",
        help="Type d'\u00e9l\u00e9ments \u00e0 cibler"
    )
    args = parser.parse_args()

    if args.file:
        with open(args.file, 'r', encoding='utf-8') as f:
            html = f.read()
    else:
        html = prompt_input()

    soup = BeautifulSoup(html, 'html.parser')
    mode = args.mode
    search_mode = 'all' if mode == 'auto' else mode
    targets = choose_best_elements(soup, search_mode)
    if not targets:
        return
    for target in targets:
        target = refine_candidate(target)
        selector = build_selector(target)
        explanation = describe_element(target)
        print(f"\u2705 S\u00e9lecteur g\u00e9n\u00e9r\u00e9 : {selector}")
        print(f"\U0001F9E0 Explication : {explanation}\n")

if __name__ == '__main__':
    main()

---

### detecteur.py
import sys
import argparse
from bs4 import BeautifulSoup
from cerveau import analyser_requete
from css_selector_generator import build_selector


_LABEL_TAGS = {
    "lien": ["a"],
    "titre": ["h1", "h2", "h3", "h4", "h5", "h6"],
    "image": ["img"],
    "texte": ["p", "div"],
    "bouton": ["button"],
}

def trouver_elements(soup: BeautifulSoup, label: str):
    tags = _LABEL_TAGS.get(label, None)
    if tags:
        return soup.find_all(tags)
    return soup.find_all(True)

def choisir_meilleur(elements):
    if not elements:
        return None
    return max(elements, key=lambda el: len(el.get_text(strip=True)))

def generer_selecteur(html: str, question: str) -> str:
    label = analyser_requete(question)
    soup = BeautifulSoup(html, "html.parser")
    elements = trouver_elements(soup, label)
    cible = choisir_meilleur(elements)
    if cible is None:
        return ""
    return build_selector(cible)

def main():
    parser = argparse.ArgumentParser(
        description="Detecteur intelligent de selecteur CSS"
    )
    parser.add_argument("question", help="Question en langage naturel")
    parser.add_argument("file", nargs="?", help="Fichier HTML, default stdin")
    args = parser.parse_args()

    if args.file:
        with open(args.file, "r", encoding="utf-8") as f:
            html = f.read()
    else:
        html = sys.stdin.read()

    selector = generer_selecteur(html, args.question)
    print(selector)

if __name__ == "__main__":
    main()

---

### css_selector_generator.py
import sys
import re
import argparse
from bs4 import BeautifulSoup

INLINE_TAGS = {
    "span", "i", "b", "em", "strong", "small", "label"
}

STRUCTURAL_TAGS = {
    "div", "section", "article", "nav", "main",
    "h1", "h2", "h3", "h4", "h5", "h6",
    "a", "p", "ul", "ol", "li"
}

GENERIC_TAGS = {"div", "span", "li", "ul", "ol", "p"}

GENERIC_CLASSES = {
    "container", "wrapper", "wrap", "box", "block",
    "row", "col", "inner", "outer", "bold"
}

POSITIVE_KEYWORDS = {
    "title", "desc", "description", "content", "card",
    "item", "nav", "link", "button"
}

def is_dynamic_id(value: str) -> bool:
    """Return True if the id looks autoâgenerated (contains long digits)."""
    return bool(re.search(r"\d{2,}", value)) or len(value) > 30

def has_keyword(value: str) -> bool:
    low = value.lower()
    return any(k in low for k in POSITIVE_KEYWORDS)

def is_generic(value: str) -> bool:
    return value.lower() in GENERIC_CLASSES

def compute_score(tag) -> int:
    score = 0
    name = tag.name.lower()

    if name in INLINE_TAGS:
        score -= 3
    if name in STRUCTURAL_TAGS:
        score += 2

    tag_id = tag.get("id")
    if tag_id:
        if not is_dynamic_id(tag_id):
            score += 5
            if has_keyword(tag_id):
                score += 1
        else:
            score -= 1

    classes = tag.get("class", [])
    for cls in classes:
        if is_generic(cls):
            score -= 2
        else:
            score += 3
            if has_keyword(cls):
                score += 1
    return score

def choose_best_element(soup: BeautifulSoup):
    best = None
    best_score = float('-inf')
    for el in soup.find_all(True):
        sc = compute_score(el)
        if sc > best_score:
            best_score = sc
            best = el
    return best

def refine_candidate(el):
    """If the element contains a single anchor, return that anchor."""
    anchors = el.find_all('a', recursive=True)
    if len(anchors) == 1:
        return anchors[0]
    return el

def has_good_id(tag) -> bool:
    tag_id = tag.get("id")
    return tag_id is not None and not is_dynamic_id(tag_id)

def build_selector(elem) -> str:
    parts = []
    current = elem
    first = True
    while current and current.name != '[document]':
        if has_good_id(current):
            parts.append(f"#{current['id']}")
            break
        classes = [c for c in current.get('class', []) if not is_generic(c)]
        if first:
            # candidate element - keep tag
            if classes:
                part = current.name + ''.join(f'.{c}' for c in classes)
            else:
                part = current.name
            parts.append(part)
            first = False
        else:
            if classes:
                if current.name in GENERIC_TAGS:
                    part = ''.join(f'.{c}' for c in classes)
                else:
                    part = current.name + ''.join(f'.{c}' for c in classes)
                parts.append(part)
        current = current.parent
    parts.reverse()
    return ' '.join(parts)

def generate_selector_candidates(tag) -> list:
    """Return a list of possible CSS selectors for the given element."""
    if tag is None:
        return []

    candidates = []

    classes = tag.get('class', []) or []
    parent = tag.parent

    parent_sel = ''
    if parent and parent.name != '[document]':
        parent_sel = build_selector(parent)

    # 1. Parent context with tag only
    if parent_sel:
        candidates.append(f"{parent_sel} {tag.name}")
    else:
        candidates.append(tag.name)

    # 2. Parent classes only if available
    if parent_sel and parent:
        parent_classes = [c for c in parent.get('class', []) if not is_generic(c)]
        if parent_classes:
            pcls = ''.join(f'.{c}' for c in parent_classes)
            candidates.append(f"{pcls} {tag.name}")

    # 3. Tag with its own classes
    if classes:
        candidates.append(tag.name + ''.join(f'.{c}' for c in classes))
        candidates.append(''.join(f'.{c}' for c in classes))

    # 4. Full path including classes
    if parent_sel:
        own = tag.name
        if classes:
            own += ''.join(f'.{c}' for c in classes)
        candidates.append(f"{parent_sel} {own}")

    # 5. id selector when present
    if has_good_id(tag):
        candidates.append(f"#{tag['id']}")

    # Deduplicate while preserving order
    seen = set()
    unique = []
    for sel in candidates:
        if sel and sel not in seen:
            unique.append(sel)
            seen.add(sel)
    return unique

def explain_selector(selector: str) -> str:
    """Return a short human explanation for a CSS selector."""
    if selector.startswith('#'):
        return "Bas\u00e9 sur l'identifiant unique de l'\u00e9l\u00e9ment, tr\u00e8s fiable."
    if selector.startswith('.') and ' ' not in selector:
        return "Utilise uniquement la ou les classes : rapide mais peut correspondre \u00e0 plusieurs \u00e9l\u00e9ments."
    if ' ' in selector:
        return "Combinaison d'\u00e9l\u00e9ments pour cibler pr\u00e9cis\u00e9ment la structure."
    return "S\u00e9lecteur simple bas\u00e9 sur la balise et ses classes."

def _score_candidate(selector: str) -> float:
    """Internal heuristic to score selectors and choose the best."""
    score = 0.0
    if selector.startswith('#'):
        score += 100
    if selector and selector[0].isalpha():
        score += 5
    classes = re.findall(r'\.([\w-]+)', selector)
    for cls in classes:
        if is_generic(cls):
            score -= 8
        else:
            score += 2
    spaces = selector.count(' ')
    score += spaces  # context is usually good
    score -= 2 * spaces
    score -= len(selector) / 10
    return score

def display_choices(tag) -> None:
    """Print all selector candidates with explanations and highlight the best."""
    candidates = generate_selector_candidates(tag)
    if not candidates:
        print("Aucun s\u00e9lecteur trouv\u00e9.")
        return

    # Rank candidates and keep the top three
    ranked = sorted(candidates, key=_score_candidate, reverse=True)
    top = ranked[:3]
    best = top[0]

    print("\U0001F3AF S\u00e9lecteurs propos\u00e9s :\n")
    for idx, sel in enumerate(top, 1):
        exp = explain_selector(sel)
        print(f"{idx}. {sel}\n   \u2192 {exp}\n")
    print(f"\u2705 Choix recommand\u00e9 : {best}")

def generate_selector(html: str) -> str:
    """Return the best CSS selector for the given HTML snippet."""
    soup = BeautifulSoup(html, 'html.parser')
    target = choose_best_element(soup)
    if target:
        target = refine_candidate(target)
    if target is None:
        return ''
    return build_selector(target)

def main():
    parser = argparse.ArgumentParser(
        description="Generate the most stable CSS selector from an HTML snippet"
    )
    parser.add_argument(
        "file", nargs="?", help="Optional HTML file. If omitted, read from stdin"
    )
    args = parser.parse_args()

    if args.file:
        with open(args.file, 'r', encoding='utf-8') as f:
            html = f.read()
    else:
        html = sys.stdin.read()

    soup = BeautifulSoup(html, 'html.parser')
    target = choose_best_element(soup)
    if target:
        target = refine_candidate(target)
    if target is None:
        return

    display_choices(target)

if __name__ == '__main__':
    main()

---

